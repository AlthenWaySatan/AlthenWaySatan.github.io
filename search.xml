<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【SCOI2016】Day1初略题解</title>
    <url>/2019/02/13/SCOI2016-Day1%E5%88%9D%E7%95%A5%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>$\ \ \ \ \ \,$做一套省选题来练练手（Day1）。</p>
<span id="more"></span>
<h2 id="【T1-背单词】"><a href="#【T1-背单词】" class="headerlink" title="【T1 背单词】"></a><a href="https://www.luogu.org/problemnew/show/P3294">【T1 背单词】</a></h2><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>$\ \ \ \ \ \,$ 由题意可以得到，如果存在一个单词是它的后缀，并且当前没有被填入表内，那他需要吃 n*n 颗泡椒，这显然是很不合算的。要优先填入后缀。</p>
<p>$\ \ \ \ \ \,$第一个问题是如何找后缀，我们可以把串反过来插入 $Trie$ 树，然后按照$Trie$ 树上的父子关系新建树，按照一种神奇的 $DFS$ 序来依次填入。</p>
<p>$\ \ \ \ \ \,$ 现在的问题是如何处理这个 $DFS$ 序，手玩一点小样例可以发现，优先走子树小的较优，现在我们得到了填入顺序，每个点的填入序号减去他父亲的和，就是我们的答案，复杂度 $O(|len|+3n)$</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,p=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) p=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c&amp;<span class="number">15</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> x*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510010</span>;</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>],appear[N];</span><br><span class="line"><span class="type">int</span> id[N],cnt2,rt,cnt,n,size[N];</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> size[x]&lt;size[y];&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);<span class="type">int</span> now=rt,v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=len;i;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!son[now][s[i]-<span class="string">&#x27;a&#x27;</span>])son[now][s[i]-<span class="string">&#x27;a&#x27;</span>]=++cnt;</span><br><span class="line">		now=son[now][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	appear[now]=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(appear[rt])&#123;a[fa].<span class="built_in">push_back</span>(appear[rt]);fa=appear[rt];&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)<span class="keyword">if</span>(son[rt][i])</span><br><span class="line">	id[son[rt][i]]=id[rt],<span class="built_in">dfs1</span>(son[rt][i],fa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">	size[rt]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a[rt].<span class="built_in">size</span>();i++)</span><br><span class="line">	<span class="built_in">dfs2</span>(a[rt][i]),size[rt]+=size[a[rt][i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_ans</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">	id[rt]=++cnt2;</span><br><span class="line">	<span class="built_in">sort</span>(a[rt].<span class="built_in">begin</span>(),a[rt].<span class="built_in">end</span>(),cmp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a[rt].<span class="built_in">size</span>();i++)</span><br><span class="line">	ans+=cnt2+<span class="number">1</span>-id[rt],<span class="built_in">get_ans</span>(a[rt][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;word.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;word.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>),<span class="built_in">insert</span>(s,i);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">get_ans</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="【T2-幸运数字】"><a href="#【T2-幸运数字】" class="headerlink" title="【T2 幸运数字】"></a><a href="https://www.luogu.org/problemnew/show/P3292">【T2 幸运数字】</a></h2><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>$\ \ \ \ \ \,$ 一眼可以看出来是实数异或线性基，不会这个的话就完全不能做这道题的。</p>
<p>$\ \ \ \ \ \,$下面的问题是，如何高效地处理路径问题？</p>
<p>$\ \ \ \ \ \,$我第一个想到的是树链剖分，复杂度为 $O(Q \log^2n)$，算上线性基合并的复杂度 $60\times 60$ 的常数有点吃不消。询问次数很大，我们可以试着多预处理一点。</p>
<p>$\ \ \ \ \ \,$倍增的复杂度为$O(Q \log n)$，加上一些蜜汁卡常数技巧，比如说去掉结构体啊什么的，就过了，空间还算充裕，没有那么卡。代码比较丑：</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> x=<span class="number">0</span>,p=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) p=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c&amp;<span class="number">15</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> x*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> V[N],res;</span><br><span class="line"><span class="type">int</span> head[N],p;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ss</span>&#123;<span class="type">int</span> last,v;&#125;G[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">	G[++p]=(ss)&#123;head[a],b&#125;;head[a]=p;</span><br><span class="line">	G[++p]=(ss)&#123;head[b],a&#125;;head[b]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> lb[N][<span class="number">19</span>][<span class="number">61</span>],ans[<span class="number">61</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> *a,<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	<span class="keyword">if</span>(x&amp;(<span class="number">1ll</span>&lt;&lt;i))</span><br><span class="line">	<span class="keyword">if</span>(!a[i])&#123;a[i]=x;<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="keyword">else</span> x^=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">querymax</span><span class="params">(<span class="type">long</span> <span class="type">long</span> *a)</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">	<span class="keyword">if</span>((res^a[i])&gt;res)res^=a[i];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">long</span> <span class="type">long</span> *a,<span class="type">long</span> <span class="type">long</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">60</span>;i++)<span class="keyword">if</span>(b[i])<span class="built_in">insert</span>(a,b[i]);&#125;</span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">19</span>],deep[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">	fa[a][<span class="number">0</span>]=f;deep[a]=deep[f]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=head[a];i;i=G[i].last)</span><br><span class="line">	<span class="keyword">if</span>(G[i].v!=f)<span class="built_in">dfs</span>(G[i].v,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="built_in">sizeof</span>(ans));</span><br><span class="line">	<span class="keyword">if</span>(deep[a]&gt;deep[b])<span class="built_in">swap</span>(a,b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	<span class="keyword">if</span>(deep[a]&lt;=deep[b]-(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">    <span class="built_in">merge</span>(ans,lb[b][i]),b=fa[b][i];</span><br><span class="line">	<span class="keyword">if</span>(a==b)&#123;<span class="built_in">merge</span>(ans,lb[a][<span class="number">0</span>]);<span class="keyword">return</span> ;&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>(fa[a][i]!=fa[b][i])&#123;</span><br><span class="line">  		<span class="built_in">merge</span>(ans,lb[a][i]),<span class="built_in">merge</span>(ans,lb[b][i]);</span><br><span class="line">    	a=fa[a][i],b=fa[b][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">merge</span>(ans,lb[a][<span class="number">0</span>]),<span class="built_in">merge</span>(ans,lb[b][<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">merge</span>(ans,lb[fa[a][<span class="number">0</span>]][<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;lucky.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;lucky.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	n=(<span class="type">int</span>)<span class="built_in">read</span>();m=(<span class="type">int</span>)<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)V[i]=<span class="built_in">read</span>(),<span class="built_in">insert</span>(lb[i][<span class="number">0</span>],V[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>,a,b;i&lt;n;i++)</span><br><span class="line">    a=<span class="built_in">read</span>(),b=<span class="built_in">read</span>(),<span class="built_in">add</span>(a,b);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">18</span>;j++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    	fa[i][j]=fa[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">  		<span class="built_in">memcpy</span>(lb[i][j],lb[i][j<span class="number">-1</span>],<span class="built_in">sizeof</span>(lb[i][j<span class="number">-1</span>]));</span><br><span class="line">    	<span class="built_in">merge</span>(lb[i][j],lb[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>,a,b;i&lt;=m;i++)&#123;</span><br><span class="line">    	a=(<span class="type">int</span>)<span class="built_in">read</span>();b=(<span class="type">int</span>)<span class="built_in">read</span>();</span><br><span class="line">    	<span class="built_in">query</span>(a,b);</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">querymax</span>(ans));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="【T3-萌萌哒】"><a href="#【T3-萌萌哒】" class="headerlink" title="【T3 萌萌哒】"></a><a href="https://www.luogu.org/problemnew/show/P3295">【T3 萌萌哒】</a></h2><h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h3><p>$\ \ \ \ \ \,$ 这道题前$30$分做法很显然吧，两段相关联的各个元素，我们可以用并查集并在一起，因为他们必须一定是同一种。最后统计并查集个数就好了，设个数为$cnt$，那么我们的答案是$9\times 10^{cnt-1}$，因为包含第一个数位的只有$1$-$9$，其他可以取$0$-$9$。复杂度$O(n^2)$</p>
<p>$\ \ \ \ \ \,$ 我们可以通过类似于势能分析来操作，来降低复杂度到$O(n\log n)$，操作很骚，一开始没想到，也没有在其他地方见到过。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,p=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) p=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c&amp;<span class="number">15</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> x*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> cnt,n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=<span class="number">1ll</span>*a*a%mod)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=<span class="number">1ll</span>*a*ans%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[<span class="number">20</span>][N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inv(x) power(x,mod-2)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> f[k][x]==x?x:f[k][x]=<span class="built_in">find</span>(k,f[k][x]);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">log_2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ret=<span class="number">0</span>;x;x&gt;&gt;=<span class="number">1</span>,ret++);</span><br><span class="line">	<span class="keyword">return</span> ret<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> xx,<span class="type">int</span> yy)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r1=<span class="built_in">find</span>(k,xx),r2=<span class="built_in">find</span>(k,yy);</span><br><span class="line">	<span class="keyword">if</span>(r1==r2) <span class="keyword">return</span>;</span><br><span class="line">	f[k][r1]=r2;</span><br><span class="line">	<span class="keyword">if</span>(!k)&#123;cnt--;<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="built_in">solve</span>(k<span class="number">-1</span>,xx,yy);</span><br><span class="line">	<span class="built_in">solve</span>(k<span class="number">-1</span>,xx+(<span class="number">1</span>&lt;&lt;k<span class="number">-1</span>),yy+(<span class="number">1</span>&lt;&lt;k<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;moe.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;moe.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	cnt=n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">18</span>;i++)</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">	f[i][j]=j;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="type">int</span> l1=<span class="built_in">read</span>(),r1=<span class="built_in">read</span>(),l2=<span class="built_in">read</span>(),r2=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(l1&gt;l2) <span class="built_in">swap</span>(l1,l2),<span class="built_in">swap</span>(r1,r2);</span><br><span class="line">		<span class="type">int</span> t=<span class="built_in">log_2</span>(r1-l1+<span class="number">1</span>);</span><br><span class="line">    	<span class="built_in">solve</span>(t,l1,l2);</span><br><span class="line">    	<span class="built_in">solve</span>(t,r1-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>,r2-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">9ll</span>*<span class="built_in">power</span>(<span class="number">10</span>,cnt<span class="number">-1</span>)%mod);</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>并查集</tag>
        <tag>Trie树</tag>
        <tag>数据结构</tag>
        <tag>异或</tag>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title>【CF438E】 The Child and Binary Tree 简易题解</title>
    <url>/2019/02/23/CF438E-The-Child-and-Binary-Tree-%E7%AE%80%E6%98%93%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>题目传送门：<a href="https://www.luogu.com.cn/problem/CF438E">【CF438E】 The Child and Binary Tree</a></p>
<span id="more"></span>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>$\ \ \ \ \ \ \,$给你 $n$ 和 $m$，和大小为 $n$ 的集合 $C$。</p>
<p>$\ \ \ \ \ \ \,$需要你统计点权在集合 $C$ 内，且点权之和分别为 $[1,m]$ 的二叉树个数。</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>$\ \ \ \ \ \ \,$根据题目，我们可以想到$DP$公式求解：</p>
<script type="math/tex; mode=display">
 f(n)= 
 \begin{cases} 
 1, & \text {$(n=0)$} \\ 
\sum_{i=1}^{n}g(i)\sum_{j=0}^{n-i}f(j)\cdot f(n-i-j), & \text{$(n > 0)$}
  \end{cases}</script><p>$\ \ \ \ \ \ \,$其中：</p>
<ul>
<li>$f(i)$意思是且点权之和 $i$ 的二叉树个数。</li>
<li>$g(i)$意思是集合 $C$ 中是否含有元素 $i$，既 $g(i)=[i\in C]$ 。</li>
</ul>
<p>$\ \ \ \ \ \ \,$怎么得到这个公式的就不说了，还是比较显然的 <del>（雾</del> 。但是很明显复杂度过不去。我们把它们写成生成函数会好一些 <del>（计数题套路？）</del>：</p>
<p>$\ \ \ \ \ \ \,$令函数 $F$ 为序列 $f(x)$ 的生成函数，函数 $G$ 为序列 $g(x)$的生成函数。</p>
<p>$\ \ \ \ \ \ \,$可以得到：</p>
<script type="math/tex; mode=display">F=G*F^2+1</script><p>$\ \ \ \ \ \ \,$解得：</p>
<script type="math/tex; mode=display">F=\frac{2}{1\pm\sqrt{1-4G}}</script><p>$\ \ \ \ \ \ \,$那么是加号还是减号啊？已知$F_0=1$。而题目保证 $(1\leq c_i \leq 10^5)$，所以有$G_0=0$。那么带入可以得到应该是取加号。</p>
<p>$\ \ \ \ \ \ \,$所以说只需要求出多项式$\frac{2}{1+\sqrt{1-4G}}$的$[1,m]$项就好了。</p>
<p>$\ \ \ \ \ \ \,$格式挺清新的，需要求逆和开根，模板直接往上套就好了呢：<a href="https://blog.csdn.net/weixin_43973966/article/details/87864851">【多项式的操作大赏】</a>。我写的开根比较麻烦，还要写 $\ln$ 和 $\exp$，然后 $\ln$ 还要写求积分和求导。所以说……基本上……所有模板都用到了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>,mod_g=<span class="number">3</span>,N=<span class="number">1600000</span>;</span><br><span class="line"><span class="type">int</span> R[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">  	<span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">  	<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=<span class="number">1ll</span>*a*a%mod)</span><br><span class="line">	<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=<span class="number">1ll</span>*ans*a%mod;</span><br><span class="line">  	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Inv(x) power(x,mod-2)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Polynomial_init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> len;<span class="keyword">for</span>(len=<span class="number">1</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NTT</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> f,<span class="type">int</span> la)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=la;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(i&lt;R[i])<span class="built_in">swap</span>(a[i],a[R[i]]);</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    	<span class="type">int</span> gn=<span class="built_in">power</span>(mod_g,(mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j+=(i&lt;&lt;<span class="number">1</span>))&#123;</span><br><span class="line">      		<span class="type">int</span> g=<span class="number">1</span>;</span><br><span class="line">      		<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++,g=<span class="number">1ll</span>*g*gn%mod)&#123;</span><br><span class="line">	        	<span class="type">int</span> x=a[j+k],y=<span class="number">1ll</span>*g*a[i+j+k]%mod;</span><br><span class="line">	        	a[j+k]=(x+y)%mod;a[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">	      	&#125;</span><br><span class="line">    	&#125; </span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="keyword">if</span>(f==<span class="number">-1</span>)&#123;</span><br><span class="line">   		<span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n);</span><br><span class="line">    	<span class="type">int</span> inv=<span class="built_in">Inv</span>(n);</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)a[i]=<span class="number">1ll</span>*a[i]*inv%mod;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Convolution</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b,<span class="type">int</span> la,<span class="type">int</span> lb)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=la,m=lb;</span><br><span class="line">	<span class="type">int</span> L=<span class="number">0</span>;<span class="keyword">for</span>(m+=n,n=<span class="number">1</span>;n&lt;m;n&lt;&lt;=<span class="number">1</span>)L++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(L<span class="number">-1</span>));</span><br><span class="line">	<span class="built_in">NTT</span>(a,<span class="number">1</span>,n);<span class="built_in">NTT</span>(b,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)a[i]=<span class="number">1ll</span>*a[i]*b[i]%mod;</span><br><span class="line">	<span class="built_in">NTT</span>(a,<span class="number">-1</span>,n);</span><br><span class="line">	<span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> C[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Inverse</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(len==<span class="number">1</span>)&#123;b[<span class="number">0</span>]=<span class="built_in">Inv</span>(a[<span class="number">0</span>]);<span class="keyword">return</span>;&#125;</span><br><span class="line">  	<span class="built_in">Inverse</span>(a,b,(len+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">  	<span class="type">int</span> L=<span class="number">0</span>,n=<span class="number">1</span>;</span><br><span class="line">  	<span class="keyword">for</span>(;n&lt;(len&lt;&lt;<span class="number">1</span>);n&lt;&lt;=<span class="number">1</span>)L++;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(L<span class="number">-1</span>));</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)C[i]=a[i];</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=len;i&lt;n;i++)C[i]=<span class="number">0</span>;</span><br><span class="line">  	<span class="built_in">NTT</span>(C,<span class="number">1</span>,n);<span class="built_in">NTT</span>(b,<span class="number">1</span>,n);</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)b[i]=<span class="number">1ll</span>*(<span class="number">2ll</span><span class="number">-1ll</span>*C[i]*b[i]%mod+mod)%mod*b[i]%mod;</span><br><span class="line">  	<span class="built_in">NTT</span>(b,<span class="number">-1</span>,n);</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=len;i&lt;n;i++)b[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Derivation</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">  	b[i<span class="number">-1</span>]=<span class="number">1ll</span>*i*a[i]%mod;</span><br><span class="line">	b[n<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Integral</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">  	b[i]=<span class="number">1ll</span>*<span class="built_in">Inv</span>(i)*a[i<span class="number">-1</span>]%mod;</span><br><span class="line">	b[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> A[N],B[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Logarithmic</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="built_in">sizeof</span>(A));</span><br><span class="line">	<span class="built_in">memset</span>(B,<span class="number">0</span>,<span class="built_in">sizeof</span>(B));</span><br><span class="line">  	<span class="built_in">Derivation</span>(a,A,len);</span><br><span class="line">  	<span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="built_in">sizeof</span>(C));</span><br><span class="line">  	<span class="built_in">Inverse</span>(a,B,len);</span><br><span class="line">  	<span class="built_in">Convolution</span>(A,B,len,len);</span><br><span class="line">  	<span class="built_in">Integral</span>(A,b,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> D[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Exponential</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(len==<span class="number">1</span>)&#123;b[<span class="number">0</span>]=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">  	<span class="built_in">Exponential</span>(a,b,len&gt;&gt;<span class="number">1</span>),<span class="built_in">Logarithmic</span>(b,D,len);</span><br><span class="line">  	D[<span class="number">0</span>]=(<span class="number">1ll</span>*a[<span class="number">0</span>]+<span class="number">1ll</span>-D[<span class="number">0</span>]+mod)%mod;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;++i) D[i]=(<span class="number">1ll</span>*a[i]-D[i]+mod)%mod;</span><br><span class="line">  	<span class="built_in">Convolution</span>(b,D,len&lt;&lt;<span class="number">1</span>,len&lt;&lt;<span class="number">1</span>);</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=len;i&lt;(len&lt;&lt;<span class="number">1</span>);++i) b[i]=D[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> E[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kth_root</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b,<span class="type">int</span> len,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="built_in">Logarithmic</span>(a,E,len);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)E[i]=<span class="number">499122177ll</span>*E[i]%mod;</span><br><span class="line">	<span class="built_in">Exponential</span>(E,b,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,F[N],G[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)++G[<span class="built_in">read</span>()];</span><br><span class="line">  	<span class="type">int</span> len=<span class="built_in">Polynomial_init</span>(m);</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)G[i]=(mod-(<span class="number">4ll</span>*G[i]%mod))%mod;</span><br><span class="line">  	++G[<span class="number">0</span>];</span><br><span class="line">  	<span class="built_in">Kth_root</span>(G,F,len,<span class="number">2</span>);</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)G[i]=<span class="number">0</span>;</span><br><span class="line">  	F[<span class="number">0</span>]=(F[<span class="number">0</span>]+<span class="number">1</span>)%mod;</span><br><span class="line">  	<span class="built_in">Inverse</span>(F,G,len);</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;++i)G[i]=(<span class="number">2ll</span>*G[i])%mod;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,G[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>DP</tag>
        <tag>多项式</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>【CF888G】 Xor-MST 简易题解</title>
    <url>/2019/02/26/CF888G-Xor-MST-%E7%AE%80%E6%98%93%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>题目传送门：<a href="https://www.luogu.com.cn/problem/CF888G">【CF888G】 Xor-MST</a></p>
<span id="more"></span>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>$\ \ \ \ \ \ \,$给你一个 $n$ 个节点的完全图，第 $i$ 个点的权值为 $a_i$ ，两点的之间边权为这两个点权值的异或值，求最小生成树的权值。</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>$\ \ \ \ \ \ \,$其实这道题没有那么复杂，还是好想的。</p>
<p>$\ \ \ \ \ \ \,$最小生成树的话，我们显然有一个基于贪心的$Kruskal$ 算法，复杂度 $O(n^2\log n)$，想想还是算了吧。</p>
<p>$\ \ \ \ \ \ \,$而遇到关于异或的题呢，我们一般会有两种想法：整形异或线性基，$Trie$ 树。</p>
<p>$\ \ \ \ \ \ \,$容易想到的，这道题当然和线性基没有关系了，我们思考一下 $Trie$ 树，首先，我们先把第一个样例从高位到低位插入线性基看看：</p>
<p><img src="https://img-blog.csdnimg.cn/20190226084314824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>$\ \ \ \ \ \ \,$容易发现，对于每个叶子节点，既每个点值之间，要是需要互相连边，那么求 <strong>他们 $Lca$ 以后的边的亦或值</strong> 即可。</p>
<p>$\ \ \ \ \ \ \,$由此可得，若是 $Lca$ 的深度越深，便约优。因为我们是从高位到低位插入的，所以浅的点权值较大，要尽量避免选择浅的点。</p>
<p>$\ \ \ \ \ \ \,$我们不妨把可能是 $Lca$ 的点拉出来瞅瞅：</p>
<p><img src="https://img-blog.csdnimg.cn/20190226085043371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>$\ \ \ \ \ \ \,$惊喜地发现，刚好有 $4$ 个点，也就是所有拥有两个儿子的点一共有 $4$ 个，可以证明，如果 $a_i$ 两两不等的话，那么这种点一共有 $n-1$ 个，那么答案就呼之欲出了：</p>
<p>$\ \ \ \ \ \ \,$我们每找到这样的点，就暴力贪心 $DFS$ 下去：</p>
<ul>
<li>每次尽量同时走左儿子或右儿子；</li>
<li>如果两个都有，就两个都走，然后返回值取 $min$ 。</li>
<li>如果两个只有不一样的儿子，就在返回值加上这一深度$bit$的值，然后继续走</li>
</ul>
<p>$\ \ \ \ \ \ \,$最终答案就是他们的 $DFS$ 值的和。</p>
<p>$\ \ \ \ \ \ \,$那如果 $a_i$ 不是两两不等的话怎么办呢，如果 $a_u=a_v$ 的话，我们当然首先建一条边连接 $u$，$v$，权值为 $0$，对答案完全没有影响，所以我们正常建，正常搜，是不会有问题的。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line">	<span class="type">int</span> son[<span class="number">2</span>][<span class="number">200000</span>*<span class="number">30</span>+<span class="number">10</span>],tot;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> now=<span class="number">0</span>,id;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">	    	id=(a&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">	    	<span class="keyword">if</span>(!son[id][now])son[id][now]=++tot;</span><br><span class="line">	    	now=son[id][now];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> r1,<span class="type">int</span> r2,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> a1=<span class="number">-1</span>,a2=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span>(son[<span class="number">0</span>][r1]&amp;&amp;son[<span class="number">0</span>][r2]) a1=<span class="built_in">Find</span>(son[<span class="number">0</span>][r1],son[<span class="number">0</span>][r2],b<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">if</span>(son[<span class="number">1</span>][r1]&amp;&amp;son[<span class="number">1</span>][r2]) a2=<span class="built_in">Find</span>(son[<span class="number">1</span>][r1],son[<span class="number">1</span>][r2],b<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">if</span>(~a1&amp;&amp;~a2) <span class="keyword">return</span> <span class="built_in">min</span>(a1,a2);</span><br><span class="line">		<span class="keyword">if</span>(~a1) <span class="keyword">return</span> a1;<span class="keyword">if</span>(~a2) <span class="keyword">return</span> a2;</span><br><span class="line">		<span class="keyword">if</span>(son[<span class="number">1</span>][r1]&amp;&amp;son[<span class="number">0</span>][r2]) a1=<span class="built_in">Find</span>(son[<span class="number">1</span>][r1],son[<span class="number">0</span>][r2],b<span class="number">-1</span>)+(<span class="number">1</span>&lt;&lt;b);</span><br><span class="line">		<span class="keyword">if</span>(son[<span class="number">0</span>][r1]&amp;&amp;son[<span class="number">1</span>][r2]) a2=<span class="built_in">Find</span>(son[<span class="number">0</span>][r1],son[<span class="number">1</span>][r2],b<span class="number">-1</span>)+(<span class="number">1</span>&lt;&lt;b);</span><br><span class="line">		<span class="keyword">if</span>(~a1&amp;&amp;~a2) <span class="keyword">return</span> <span class="built_in">min</span>(a1,a2);</span><br><span class="line">		<span class="keyword">if</span>(~a1) <span class="keyword">return</span> a1;<span class="keyword">if</span>(~a2) <span class="keyword">return</span> a2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(T.son[<span class="number">0</span>][a]&amp;&amp;T.son[<span class="number">1</span>][a]) ans+=<span class="number">1ll</span>*T.<span class="built_in">Find</span>(T.son[<span class="number">0</span>][a],T.son[<span class="number">1</span>][a],b<span class="number">-1</span>)+(<span class="number">1ll</span>&lt;&lt;b);</span><br><span class="line">	<span class="keyword">if</span>(T.son[<span class="number">0</span>][a]) <span class="built_in">dfs</span>(T.son[<span class="number">0</span>][a],b<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">if</span>(T.son[<span class="number">1</span>][a]) <span class="built_in">dfs</span>(T.son[<span class="number">1</span>][a],b<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,v;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)T.<span class="built_in">Insert</span>(<span class="built_in">read</span>());</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>Trie树</tag>
        <tag>数据结构</tag>
        <tag>异或</tag>
      </tags>
  </entry>
  <entry>
    <title>【CF487E】 Tourists 简易题解</title>
    <url>/2019/03/20/CF487E-Tourists-%E7%AE%80%E6%98%93%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>题目传送门：<a href="https://www.luogu.com.cn/problem/CF487E">【CF487E】 Tourists</a></p>
<span id="more"></span>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>$\ \ \ \ \ \ \,$ 给你 $n$ 个点和 $m$条边的无向图，没有自环，没有重边，每个点上面有点权。</p>
<p>$\ \ \ \ \ \ \,$ 每次可能有两种操作：修改一个点的点权，或者询问两个点之间的路径上最小可能的点权是多少。</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>$\ \ \ \ \ \ \,$有一个很显然的贪心想法，询问的时候肯定优先走较小权值路径，也就是在有分叉（点双）的时候走较小权值的那一侧，而只有可能最小的会造成贡献。</p>
<p>$\ \ \ \ \ \ \,$所以说我们可以尝试将每个点双之间建一个堆，记录最小的点权。</p>
<p>$\ \ \ \ \ \ \,$也就是建出一棵圆方树，方点上面一个堆，记录与他向连的圆点的权值最小值。</p>
<p>$\ \ \ \ \ \ \,$每次询问就只需要考虑经过唯一路径上面 <strong>圆点点权</strong> 和 <strong>方点堆顶</strong> 的最小值就行了，这个可以用树链剖分搞。</p>
<p>$\ \ \ \ \ \ \,$然后考虑修改，便是修改与这个 <strong>圆点</strong> 相连的方点上面的堆就好了，删除原来的点权，加入新点权。但是这样子我们不能保证其复杂度，要是圆方树建成一个菊花图就会 $T$ 飞了。</p>
<p>$\ \ \ \ \ \ \,$我们再考虑一下，我们树链剖分往上跳的时候，其实已经计算过  <strong>走过的方点</strong> 的父亲了（圆点），会有计算重复的地方。所以说 <strong>方点的堆</strong> 里面不需要记录其父亲的权值，换句话说，对于一个圆点，他的值只需要被他的 <strong>方点父亲</strong> 的堆记录，这样子每次修改，只需要修改他父亲的，加上线段树和堆的复杂度也不过一次 $O(\log n)$。</p>
<p>$\ \ \ \ \ \ \,$但是每次询问的是两个圆点，其$LCA$有可能是方点，这个时候少计算了一个 <strong>方点$LCA$</strong> 的父亲，需要注意加入判断一下。<del>（第一个样第一次例询问输出为2有可能就是这样死的）</del></p>
<p>$\ \ \ \ \ \ \,$然后就是 <strong>圆方树+树链剖分+线段树+可删堆</strong> 套模板了，可删堆我是用 $fhq_Treap$ 实现的，所以说代码比较丑。</p>
<p>$\ \ \ \ \ \ \,$预处理复杂度$O(n\log n)$，修改操作复杂度$O(\log n)$，询问操作复杂度$O(\log^2 n)$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4e5</span>+<span class="number">200</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[N],E[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_E</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;E[x].<span class="built_in">push_back</span>(y);E[y].<span class="built_in">push_back</span>(x);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_G</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;G[x].<span class="built_in">push_back</span>(y);G[y].<span class="built_in">push_back</span>(x);&#125;</span><br><span class="line"><span class="type">int</span> sta[N],top,Size;</span><br><span class="line"><span class="type">int</span> tim,dfn[N],low[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">  	dfn[u]=low[u]=++tim;</span><br><span class="line">  	sta[++top]=u;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="keyword">auto</span> v:E[u])&#123;</span><br><span class="line">    	<span class="keyword">if</span>(dfn[v]) low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">    	<span class="keyword">else</span>&#123;</span><br><span class="line">      		<span class="built_in">tarjan</span>(v),low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">      		<span class="keyword">if</span>(low[v]&gt;=dfn[u])&#123;</span><br><span class="line">        		++Size;<span class="type">int</span> p;</span><br><span class="line">        		<span class="keyword">while</span>((p=sta[top])!=v)<span class="built_in">add_G</span>(p,Size),top--;</span><br><span class="line">        		p=sta[top],<span class="built_in">add_G</span>(p,Size),top--;</span><br><span class="line">        		<span class="built_in">add_G</span>(u,Size);</span><br><span class="line">      		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> ls,rs,key,size,val;&#125;T[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson T[rt].ls</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson T[rt].rs</span></span><br><span class="line"><span class="type">int</span> node_cnt;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;Rub;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> rt;</span><br><span class="line">	<span class="keyword">if</span>(!Rub.<span class="built_in">empty</span>())rt=Rub.<span class="built_in">front</span>(),Rub.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="keyword">else</span> rt=++node_cnt;</span><br><span class="line">	lson=rson=<span class="number">0</span>;</span><br><span class="line">	T[rt].key=<span class="built_in">rand</span>();T[rt].val=x;T[rt].size=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fhq_Treap</span>&#123;</span><br><span class="line">	<span class="type">int</span> root;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;T[rt].size=T[lson].size+T[rson].size+<span class="number">1</span>;&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!a||!b)<span class="keyword">return</span> a|b;</span><br><span class="line">		<span class="keyword">if</span>(T[a].key&lt;T[b].key)&#123;T[a].rs=<span class="built_in">merge</span>(T[a].rs,b);<span class="built_in">pushup</span>(a);<span class="keyword">return</span> a;&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;T[b].ls=<span class="built_in">merge</span>(a,T[b].ls);<span class="built_in">pushup</span>(b);<span class="keyword">return</span> b;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> x,<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!rt)&#123;a=b=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(T[rt].val&lt;=x)&#123;a=rt;<span class="built_in">split</span>(rson,x,rson,b);&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;b=rt;<span class="built_in">split</span>(lson,x,a,lson);&#125;</span><br><span class="line">		<span class="built_in">pushup</span>(rt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> a,b;</span><br><span class="line">		<span class="built_in">split</span>(root,x,a,b);</span><br><span class="line">		<span class="type">int</span> rt=<span class="built_in">newnode</span>(x);</span><br><span class="line">		root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(a,rt),b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> a,b,c;</span><br><span class="line">		<span class="built_in">split</span>(root,x,a,c);</span><br><span class="line">		<span class="built_in">split</span>(a,x<span class="number">-1</span>,a,b);</span><br><span class="line">		b=<span class="built_in">merge</span>(T[b].ls,T[b].rs);</span><br><span class="line">		root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(a,b),c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> rt=root;</span><br><span class="line">		<span class="keyword">while</span>(lson)rt=lson;</span><br><span class="line">		<span class="keyword">return</span> T[rt].val;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;Treap[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos[N],w[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span>&#123;</span><br><span class="line">  	<span class="meta">#<span class="keyword">define</span> Lson l,mid,rt&lt;&lt;1</span></span><br><span class="line">  	<span class="meta">#<span class="keyword">define</span> Rson mid+1,r,rt&lt;&lt;1|1</span></span><br><span class="line">  	<span class="type">int</span> sum[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">  	<span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;sum[rt]=<span class="built_in">min</span>(sum[rt&lt;&lt;<span class="number">1</span>],sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);&#125;</span><br><span class="line">  	<span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">  		<span class="keyword">if</span>(l==r)&#123;sum[rt]=w[pos[l]];<span class="keyword">return</span>;&#125;</span><br><span class="line">  		<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  		<span class="built_in">build</span>(Lson);<span class="built_in">build</span>(Rson);</span><br><span class="line">  		<span class="built_in">pushup</span>(rt);</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> c,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(l==r)&#123;sum[rt]=c;<span class="keyword">return</span>;&#125;</span><br><span class="line">    	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">if</span>(id&lt;=mid)<span class="built_in">Update</span>(id,c,Lson);</span><br><span class="line">    	<span class="keyword">else</span> <span class="built_in">Update</span>(id,c,Rson);</span><br><span class="line">		<span class="built_in">pushup</span>(rt);</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class="keyword">return</span> sum[rt];</span><br><span class="line">    	<span class="type">int</span> ret=<span class="number">1e9</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=mid)ret=<span class="built_in">min</span>(ret,<span class="built_in">Query</span>(L,R,Lson));</span><br><span class="line">    	<span class="keyword">if</span>(R&gt;mid)ret=<span class="built_in">min</span>(ret,<span class="built_in">Query</span>(L,R,Rson));</span><br><span class="line">    	<span class="keyword">return</span> ret;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;Seg;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,Q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree_Chain_Dissection</span>&#123;</span><br><span class="line">	<span class="type">int</span> idx[N];</span><br><span class="line">	<span class="type">int</span> deep[N],fa[N],son[N],size[N];</span><br><span class="line">	<span class="type">int</span> cnt,top[N];</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f,<span class="type">int</span> dep)</span></span>&#123;</span><br><span class="line">		deep[u]=dep;fa[u]=f;size[u]=<span class="number">1</span>;</span><br><span class="line">		Treap[fa[u]].<span class="built_in">Insert</span>(w[u]);</span><br><span class="line">		<span class="type">int</span> maxson=<span class="number">-1</span>;</span><br><span class="line">	  	<span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])<span class="keyword">if</span>(v!=f)&#123;</span><br><span class="line">		  	size[u]+=<span class="built_in">dfs1</span>(v,u,dep+<span class="number">1</span>);</span><br><span class="line">		  	<span class="keyword">if</span>(size[v]&gt;maxson)maxson=size[v],son[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> size[u];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">		idx[u]=++cnt;top[u]=topf;</span><br><span class="line">		pos[cnt]=u;</span><br><span class="line">		<span class="keyword">if</span>(!son[u])<span class="keyword">return</span>;</span><br><span class="line">		<span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line">	  	<span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])<span class="keyword">if</span>(!idx[v])<span class="built_in">dfs2</span>(v,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	  	<span class="keyword">for</span>(<span class="type">int</span> i=n+<span class="number">1</span>;i&lt;=Size;++i)w[i]=Treap[i].<span class="built_in">Min</span>();</span><br><span class="line">		Seg.<span class="built_in">build</span>(<span class="number">1</span>,Size,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	  	<span class="keyword">if</span>(fa[u])&#123;</span><br><span class="line">	    	Treap[fa[u]].<span class="built_in">Delete</span>(w[u]);</span><br><span class="line">	    	Treap[fa[u]].<span class="built_in">Insert</span>(val);</span><br><span class="line">	    	Seg.<span class="built_in">Update</span>(idx[fa[u]],Treap[fa[u]].<span class="built_in">Min</span>(),<span class="number">1</span>,Size,<span class="number">1</span>);</span><br><span class="line">	  	&#125;</span><br><span class="line">	  	w[u]=val;</span><br><span class="line">		Seg.<span class="built_in">Update</span>(idx[u],val,<span class="number">1</span>,Size,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	  	<span class="type">int</span> ans=inf;</span><br><span class="line">	  	<span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">	    	<span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line">	    	ans=<span class="built_in">min</span>(ans,Seg.<span class="built_in">Query</span>(idx[top[x]],idx[x],<span class="number">1</span>,Size,<span class="number">1</span>));</span><br><span class="line">	    	x=fa[top[x]];</span><br><span class="line">	  	&#125;</span><br><span class="line">	 	<span class="keyword">if</span>(deep[x]&gt;deep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line">	  	ans=<span class="built_in">min</span>(ans,Seg.<span class="built_in">Query</span>(idx[x],idx[y],<span class="number">1</span>,Size,<span class="number">1</span>));</span><br><span class="line">    	<span class="keyword">if</span>(x&lt;=n)<span class="keyword">return</span> ans;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">min</span>(ans,w[fa[x]]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;TCD;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	Size=n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();Q=<span class="built_in">read</span>();w[<span class="number">0</span>]=inf;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)w[i]=<span class="built_in">read</span>();</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a,b;i&lt;=m;++i)</span><br><span class="line">	a=<span class="built_in">read</span>(),b=<span class="built_in">read</span>(),<span class="built_in">add_E</span>(a,b);</span><br><span class="line">  	<span class="built_in">tarjan</span>(<span class="number">1</span>);</span><br><span class="line">  	TCD.<span class="built_in">init</span>();</span><br><span class="line">  	<span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">    	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);a=<span class="built_in">read</span>(),b=<span class="built_in">read</span>();</span><br><span class="line">    	<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)TCD.<span class="built_in">Update</span>(a,b);</span><br><span class="line">    	<span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,TCD.<span class="built_in">Query</span>(a,b));</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>图论</tag>
        <tag>圆方树</tag>
      </tags>
  </entry>
  <entry>
    <title>【SCOI2016】Day2初略题解</title>
    <url>/2019/02/15/SCOI2016-Day2%E5%88%9D%E7%95%A5%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>$\ \ \ \ \ \,$做一套省选题来练练手（Day2）。</p>
<span id="more"></span>
<h2 id="【T1-妖怪】"><a href="#【T1-妖怪】" class="headerlink" title="【T1 妖怪】"></a><a href="https://www.luogu.org/problemnew/show/P3291">【T1 妖怪】</a></h2><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>$\ \ \ \ \ \,$ 对于一个妖怪的两个属性，为了方便我们把它定义为 $x$，$y$，而要求的一个妖怪的战斗力应该为：</p>
<script type="math/tex; mode=display">(\frac{b}{a}+1)x+(\frac{a}{b}+1)y</script><p>$\ \ \ \ \ \,$ 既：</p>
<script type="math/tex; mode=display">\frac{b}{a}x+\frac{a}{b}y+x+y</script><p>$\ \ \ \ \ \,$ 由于 $x$，$y$ 已经确定，所以我们需要找的是 $\frac{b}{a}x+\frac{a}{b}y$ 最大的最小。</p>
<p>$\ \ \ \ \ \,$容易得到这是个<strong>对勾函数</strong>，对于一个怪物，当$\frac{b}{a}=\sqrt{\frac{y}{x}}$ 时，战斗力最小。</p>
<p>$\ \ \ \ \ \,$所以我们以 $x$，$y$ 为横纵坐标做个上凸壳，那么答案就一定是在凸壳上面，就会存在下面两种情况：</p>
<ul>
<li>在点上：$\frac{b}{a}=\sqrt{\frac{y}{x}}$</li>
<li>在边上：需要满足：<script type="math/tex; mode=display">(\frac{b}{a}+1)x_1+(\frac{a}{b}+1)y_1=(\frac{b}{a}+1)x_2+(\frac{a}{b}+1)y_2</script>解得：$\frac{b}{a}=\frac{y_1-y_2}{x_2-x_1}$</li>
</ul>
<p>$\ \ \ \ \ \,$就这样扫一遍过去就行了，复杂度 $O(n \log n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,p=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)p=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c&amp;<span class="number">15</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> x*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;<span class="type">long</span> <span class="type">long</span> x,y;&#125;p[N],f[N];</span><br><span class="line"><span class="keyword">inline</span> Point <span class="keyword">operator</span> +(<span class="type">const</span> Point &amp;a,<span class="type">const</span> Point &amp;b)</span><br><span class="line">&#123;<span class="keyword">return</span> (Point)&#123;a.x+b.x,a.y+b.y&#125;;&#125;</span><br><span class="line"><span class="keyword">inline</span> Point <span class="keyword">operator</span> -(<span class="type">const</span> Point &amp;a,<span class="type">const</span> Point &amp;b)</span><br><span class="line">&#123;<span class="keyword">return</span> (Point)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Point &amp;a,<span class="type">const</span> Point &amp;b)</span><br><span class="line">&#123;<span class="keyword">return</span> a.x==b.x?a.y&lt;b.y:a.x&lt;b.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">Cross</span><span class="params">(<span class="type">const</span> Point &amp;a,<span class="type">const</span> Point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> a.x*b.y-a.y*b.x;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Solve</span><span class="params">(Point *P,<span class="type">int</span> n,Point *F)</span></span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(P+<span class="number">1</span>,P+n+<span class="number">1</span>);<span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(;top&gt;<span class="number">1</span>&amp;&amp;<span class="built_in">Cross</span>(F[top]-F[top<span class="number">-1</span>],P[i]-F[top<span class="number">-1</span>])&gt;=<span class="number">0</span>;top--);</span><br><span class="line">    	F[++top]=P[i];</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">solve</span><span class="params">(<span class="type">const</span> Point &amp;a,<span class="type">double</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> k&lt;=<span class="number">0</span>?inf:(<span class="type">double</span>)a.x+a.y+k*a.x+a.y/k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Getval_point</span><span class="params">(<span class="type">const</span> Point &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>((<span class="type">double</span>)a.y/a.x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Getval_line</span><span class="params">(<span class="type">const</span> Point &amp;a,<span class="type">const</span> Point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> a.x==b.x?-inf:((<span class="type">double</span>)(a.y-b.y)/(<span class="type">double</span>)(b.x-a.x));&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;monster.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;monster.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)p[i].x=<span class="number">1ll</span>*<span class="built_in">read</span>(),p[i].y=<span class="number">1ll</span>*<span class="built_in">read</span>();</span><br><span class="line">	m=<span class="built_in">Solve</span>(p,n,f);</span><br><span class="line">	<span class="keyword">if</span>(m&lt;<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.4lf&quot;</span>,<span class="built_in">solve</span>(f[<span class="number">1</span>],<span class="built_in">Getval_point</span>(f[<span class="number">1</span>])));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">double</span> k1,k2,k3,ans=inf;</span><br><span class="line">		k1=<span class="built_in">Getval_point</span>(f[<span class="number">1</span>]),k2=<span class="built_in">Getval_line</span>(f[<span class="number">1</span>],f[<span class="number">2</span>]);</span><br><span class="line">		<span class="keyword">if</span>(k1&lt;=k2)ans=<span class="built_in">min</span>(ans,<span class="built_in">solve</span>(f[<span class="number">1</span>],k1));</span><br><span class="line">		k1=<span class="built_in">Getval_point</span>(f[m]),k2=<span class="built_in">Getval_line</span>(f[m<span class="number">-1</span>],f[m]);</span><br><span class="line">		<span class="keyword">if</span>(k1&gt;=k2)ans=<span class="built_in">min</span>(ans,<span class="built_in">solve</span>(f[m],k1));</span><br><span class="line">  		ans=<span class="built_in">min</span>(ans,<span class="built_in">solve</span>(f[m],k2));</span><br><span class="line">  		<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">2</span>;i&lt;m;++i)&#123;</span><br><span class="line">  			k1=<span class="built_in">Getval_line</span>(f[i<span class="number">-1</span>],f[i]);</span><br><span class="line">  			k2=<span class="built_in">Getval_line</span>(f[i],f[i+<span class="number">1</span>]);</span><br><span class="line">  			k3=<span class="built_in">Getval_point</span>(f[i]);</span><br><span class="line">  			ans=<span class="built_in">min</span>(ans,<span class="built_in">solve</span>(f[i],k1));</span><br><span class="line">  			<span class="keyword">if</span>(k1&lt;=k3&amp;&amp;k3&lt;=k2)</span><br><span class="line">  			ans=<span class="built_in">min</span>(ans,<span class="built_in">solve</span>(f[i],k3));</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="built_in">printf</span>(<span class="string">&quot;%.4lf\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="【T2-美味】"><a href="#【T2-美味】" class="headerlink" title="【T2 美味】"></a><a href="https://www.luogu.org/problemnew/show/P3293">【T2 美味】</a></h2><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>$\ \ \ \ \ \,$又是异或最大呢，不是线性基就是贪心了，day1才搞了线性基，可以排除，我们看看怎么贪心。</p>
<p>$\ \ \ \ \ \,$首先可以看到他有一个取值范围的限制，我们可以用到可持久化数据结构维护。</p>
<p>$\ \ \ \ \ \,$然后我们可以贪心地想，从高位到低为维护 $a_i$ 的存在性。这个可持久化数据结构需要满足下面的操作：</p>
<ul>
<li>插入一个数；</li>
<li>删除一个数；</li>
<li>统计某个取值范围的数数量是多少。</li>
</ul>
<p>$\ \ \ \ \ \,$我最后选择了权值主席树。</p>
<p>$\ \ \ \ \ \,$现在对于每一次询问，我们贪心一下，从高位到低位枚举，如果$b$这一位为$1$，我们就找 $0$ ，反之找 $1$。</p>
<p>$\ \ \ \ \ \,$怎么找呢？我们令当前找到第$i$位， $ans$ 等于当前最优的 $a_i+x$，那么我们就找当前 $[l,r]$ 范围内，是否存在有数次在区间（$1/0$为当前要找的数）：</p>
<script type="math/tex; mode=display">[ans+(1/0<<i)-x,ans+(1/0<<i)-x+(1<<i)-1]</script><p>$\ \ \ \ \ \,$存在的话就更新$ans$为 $ans+(1/0&lt;&lt;i)$，不然退而求其次，取 $ans+(0/1&lt;&lt;i)$。</p>
<p>$\ \ \ \ \ \,$这样我们可以保证在完成贪心，取到第0位之时，$ans$ 等于最优的 $a_i+x$。（并不关心是哪个$a_i$，反正是拼出来了。</p>
<p>$\ \ \ \ \ \,$复杂度$O(n \log a_{max}+m\log^2 a_{max})$</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,p=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) p=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c&amp;<span class="number">15</span>);c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> x*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N],root[N];</span><br><span class="line"><span class="type">int</span> n,m,nn;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CM_Tree</span>&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lson l,mid,ls[rt]</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rson mid+1,r,rs[rt]</span></span><br><span class="line">	<span class="type">int</span> ls[N*<span class="number">20</span>],rs[N*<span class="number">20</span>],sum[N*<span class="number">20</span>],size;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">copy</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">		ls[++size]=ls[rt];</span><br><span class="line">		rs[size]=rs[rt];</span><br><span class="line">		sum[size]=sum[rt];</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> &amp;rt)</span></span>&#123;</span><br><span class="line">    	rt=<span class="built_in">copy</span>(rt);sum[rt]++;</span><br><span class="line">    	<span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">if</span>(id&lt;=mid)<span class="built_in">update</span>(id,lson);</span><br><span class="line">    	<span class="keyword">else</span> <span class="built_in">update</span>(id,rson);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> rt,<span class="type">int</span> rt2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class="keyword">return</span> sum[rt2]-sum[rt];</span><br><span class="line">    	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ret=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=mid)ret+=<span class="built_in">query</span>(L,R,lson,ls[rt2]);</span><br><span class="line">    	<span class="keyword">if</span>(mid&lt;R)ret+=<span class="built_in">query</span>(L,R,rson,rs[rt2]);</span><br><span class="line">    	<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123;</span><br><span class="line">	L=<span class="built_in">max</span>(<span class="number">0</span>,L);R=<span class="built_in">min</span>(R,nn);</span><br><span class="line">	<span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> tree.<span class="built_in">query</span>(L,R,<span class="number">0</span>,nn,root[i],root[j])&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> getbit(a,i) ((a&gt;&gt;i)&amp;1)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;food.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;food.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=<span class="built_in">read</span>(),nn=<span class="built_in">max</span>(nn,a[i]);</span><br><span class="line">  	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)root[i]=root[i<span class="number">-1</span>],tree.<span class="built_in">update</span>(a[i],<span class="number">0</span>,nn,root[i]);</span><br><span class="line">  	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    	<span class="type">int</span> b=<span class="built_in">read</span>(),x=<span class="built_in">read</span>(),l=<span class="built_in">read</span>(),r=<span class="built_in">read</span>(),ans=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">17</span>,ls;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">    		<span class="keyword">if</span>(!<span class="built_in">getbit</span>(b,i))ls=ans+(<span class="number">1</span>&lt;&lt;i)-x;</span><br><span class="line">    		<span class="keyword">else</span> ls=ans-x;</span><br><span class="line">      		<span class="keyword">if</span>(<span class="built_in">check</span>(l<span class="number">-1</span>,r,ls,ls+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>))ans=ls+x;</span><br><span class="line">      		<span class="keyword">else</span> ans+=<span class="built_in">getbit</span>(b,i)&lt;&lt;i;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans^b);</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="【T3-围棋】"><a href="#【T3-围棋】" class="headerlink" title="【T3 围棋】"></a><a href="https://www.luogu.org/problemnew/show/P3290">【T3 围棋】</a></h2><p>$\ \ \ \ \ \,$插头dp是不会做插头dp的，这辈子不可能做插头dp的。写起来又怪麻烦，就是打打傻逼暴力，才能骗得了分这样子。</p>
<p>$\ \ \ \ \ \,$（逃</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
        <tag>计算几何</tag>
        <tag>凸壳</tag>
        <tag>数形结合</tag>
        <tag>主席树</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Codeforces Round #536 (Div. 2)【己亥年农历新年赛】简略题解</title>
    <url>/2019/02/15/Codeforces-Round-536-Div-2-%E5%B7%B1%E4%BA%A5%E5%B9%B4%E5%86%9C%E5%8E%86%E6%96%B0%E5%B9%B4%E8%B5%9B-%E7%AE%80%E7%95%A5%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="【题目地址】"><a href="#【题目地址】" class="headerlink" title="【题目地址】"></a><a href="https://codeforces.com/contest/1106">【题目地址】</a></h2><hr>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>$\ \ \ \ \ \ \,$这场比赛是wc2019回家那天晚上举办的，从8点到10点刚好在动车上，饥寒交迫，还拉肚子（吃不惯粤菜），就没有参加，是后面写的。</p>
<p>$\ \ \ \ \ \ \,$这套题在洛谷上面五颜六色的，很有意思啊（除了没有红的），题目也算可做，感觉很过年很快乐呢（<del>嘤嘤</del><br><img src="https://img-blog.csdnimg.cn/20190215201821828.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<span id="more"></span>
<hr>
<h2 id="A-Lunar-New-Year-and-Cross-Counting"><a href="#A-Lunar-New-Year-and-Cross-Counting" class="headerlink" title="A. Lunar New Year and Cross Counting"></a><a href="https://codeforces.com/contest/1106/problem/A">A. Lunar New Year and Cross Counting</a></h2><p>$\ \ \ \ \ \ \,$模拟？暴力？可以不解释吗……</p>
<p><img src="https://img-blog.csdnimg.cn/20190215202145632.jpg" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> mp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x+<span class="number">2</span>&gt;n||y+<span class="number">2</span>&gt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(mp[x][y]!=<span class="string">&#x27;X&#x27;</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">if</span>(mp[x][y+<span class="number">2</span>]!=<span class="string">&#x27;X&#x27;</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(mp[x+<span class="number">1</span>][y+<span class="number">1</span>]!=<span class="string">&#x27;X&#x27;</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(mp[x+<span class="number">2</span>][y]!=<span class="string">&#x27;X&#x27;</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">if</span>(mp[x+<span class="number">2</span>][y+<span class="number">2</span>]!=<span class="string">&#x27;X&#x27;</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,mp[i]+<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">	ans+=<span class="built_in">check</span>(i,j);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="B-Lunar-New-Year-and-Food-Ordering"><a href="#B-Lunar-New-Year-and-Food-Ordering" class="headerlink" title="B. Lunar New Year and Food Ordering"></a><a href="https://codeforces.com/contest/1106/problem/B">B. Lunar New Year and Food Ordering</a></h2><p>$\ \ \ \ \ \ \,$这个也是模拟吧，我们把菜品排个序，用一个指针跳就好了吧……（敷衍<br><img src="https://img-blog.csdnimg.cn/20190215203257557.jpg" alt="在这里插入图片描述"><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,z=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> rk[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> a,c,id;&#125;di[N];</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node &amp;a,<span class="type">const</span> node &amp;b)</span><br><span class="line">&#123;<span class="keyword">return</span> a.c&lt;b.c||(a.c==b.c&amp;&amp;a.id&lt;b.id);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)di[i].a=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)di[i].c=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)di[i].id=i;</span><br><span class="line">	<span class="built_in">sort</span>(di+<span class="number">1</span>,di+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)rk[di[i].id]=i;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="type">int</span> kind=<span class="built_in">read</span>(),cnt=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(di[rk[kind]].a&gt;=cnt)&#123;</span><br><span class="line">			di[rk[kind]].a-=cnt;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1ll</span>*di[rk[kind]].c*cnt);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> ls=<span class="number">0ll</span>;</span><br><span class="line">		<span class="keyword">if</span>(di[rk[kind]].a)&#123;</span><br><span class="line">			cnt-=di[rk[kind]].a;</span><br><span class="line">			ls+=<span class="number">1ll</span>*di[rk[kind]].c*di[rk[kind]].a;</span><br><span class="line">			di[rk[kind]].a=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cnt)&#123;</span><br><span class="line">			<span class="keyword">if</span>((!di[z].a)&amp;&amp;z&lt;=n)z++;</span><br><span class="line">			<span class="keyword">if</span>(z&gt;n)&#123;ls=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(di[z].a&gt;=cnt)&#123;</span><br><span class="line">					di[z].a-=cnt;</span><br><span class="line">					ls+=<span class="number">1ll</span>*di[z].c*cnt;</span><br><span class="line">					cnt=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					cnt-=di[z].a;</span><br><span class="line">					ls+=<span class="number">1ll</span>*di[z].c*di[z].a;</span><br><span class="line">					di[z].a=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ls);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="C-Lunar-New-Year-and-Number-Division"><a href="#C-Lunar-New-Year-and-Number-Division" class="headerlink" title="C. Lunar New Year and Number Division"></a><a href="https://codeforces.com/contest/1106/problem/C">C. Lunar New Year and Number Division</a></h2><p>$\ \ \ \ \ \ \,$根据二项式定理，当然是两个两个分为一组最合算了（$n$ 范围明示</p>
<p>$\ \ \ \ \ \ \,$我们展开可得：</p>
<script type="math/tex; mode=display">(a+b)^2=a^2+b^2+2ab</script><p>$\ \ \ \ \ \ \,$那么我们就想要两个成积较小的分一组最好，就是排序过后，最小的和最大的分一组好了呀。</p>
<p><img src="https://img-blog.csdnimg.cn/20190215204003943.jpg" alt="在这里插入图片描述"><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="type">int</span> a[N],n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=n;i&lt;=j;i++,j--)</span><br><span class="line">	ans+=<span class="number">1ll</span>*(a[i]+a[j])*(a[i]+a[j]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="D-Lunar-New-Year-and-a-Wander"><a href="#D-Lunar-New-Year-and-a-Wander" class="headerlink" title="D. Lunar New Year and a Wander"></a><a href="https://codeforces.com/contest/1106/problem/D">D. Lunar New Year and a Wander</a></h2><p>$\ \ \ \ \ \ \,$BFS……</p>
<p>$\ \ \ \ \ \ \,$并不是，其实也差不多吧，当前可以走到的点，我们把他放进堆里面，然后每次走堆里最小的这个样子。</p>
<p>$\ \ \ \ \ \ \,$（因为题意没看懂翻车了几次</p>
<p><img src="https://img-blog.csdnimg.cn/20190215204454189.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3Mzk2Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[N];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="type">int</span> a=<span class="built_in">read</span>(),b=<span class="built_in">read</span>();</span><br><span class="line">		G[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">		G[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	<span class="built_in">sort</span>(G[i].<span class="built_in">begin</span>(),G[i].<span class="built_in">end</span>());</span><br><span class="line">	Q.<span class="built_in">push</span>(<span class="number">-1</span>);used[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=-Q.<span class="built_in">top</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,u);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])<span class="keyword">if</span>(!used[v])</span><br><span class="line">		Q.<span class="built_in">push</span>(-v),used[v]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="E-Lunar-New-Year-and-Red-Envelopes"><a href="#E-Lunar-New-Year-and-Red-Envelopes" class="headerlink" title="E. Lunar New Year and Red Envelopes"></a><a href="https://codeforces.com/contest/1106/problem/E">E. Lunar New Year and Red Envelopes</a></h2><p>$\ \ \ \ \ \ \,$后面两道题就开始有讲的意思了，反正这道题我并没有独自写出来（我怀疑题都没有怎么读懂（我好菜呀<br><img src="https://img-blog.csdnimg.cn/20190215204926766.jpg" alt="在这里插入图片描述"></p>
<p>$\ \ \ \ \ \ \,$题目做法是DP，我们定义$f_{i,j}$，表示被打扰了 $i$ 次，现在时间是 $j$ 的最小收益。转移方程呢就是：</p>
<script type="math/tex; mode=display">f_{i,j+1}=f_{i-1,j}</script><script type="math/tex; mode=display">f_{i,a_l.d+1}=f_{i-1,k}+a_l.w</script><p>$\ \ \ \ \ \ \,$我们预处理数当前时间用那个红包好，就可以降低复杂度到$O(nm)$，具体来说，就是哪个钱多哪个好，钱一样多的话就是哪个冷却时间长哪个好。具体操作看的<a href="https://blog.csdn.net/g21glf/article/details/86743023"><strong>这里</strong></a>，其实很多地方没有必要这么麻烦，但是自己确实是太菜了，没有自己独立做出来。<br><img src="https://img-blog.csdnimg.cn/20190215210921828.jpg" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> d,w,t;&#125;sta[N];</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node &amp;a,<span class="type">const</span> node &amp;b)</span><br><span class="line">&#123;<span class="keyword">return</span> a.w&gt;b.w||(a.w==b.w&amp;&amp;a.d&gt;b.d);&#125;</span><br><span class="line">vector&lt;node&gt; e[N];</span><br><span class="line">map&lt;node,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(node a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(mp.<span class="built_in">count</span>(a))mp[a]++;</span><br><span class="line">	<span class="keyword">else</span> mp[a]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(node a)</span></span>&#123;</span><br><span class="line">	mp[a]--;</span><br><span class="line">	<span class="keyword">if</span>(!mp[a])mp.<span class="built_in">erase</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f[<span class="number">2</span>][N],ans=(<span class="number">1ll</span>&lt;&lt;<span class="number">62</span>);</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();k=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,s,t,d,w;i&lt;=k;i++)&#123;</span><br><span class="line">		s=<span class="built_in">read</span>(),t=<span class="built_in">read</span>(),d=<span class="built_in">read</span>(),w=<span class="built_in">read</span>();</span><br><span class="line">		e[s].<span class="built_in">push_back</span>((node)&#123;d,w,<span class="number">1</span>&#125;);</span><br><span class="line">		e[t+<span class="number">1</span>].<span class="built_in">push_back</span>((node)&#123;d,w,<span class="number">-1</span>&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> p:e[i])</span><br><span class="line">			<span class="keyword">if</span>(~p.t)<span class="built_in">Insert</span>(p);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">Delete</span>(p);</span><br><span class="line">		<span class="keyword">if</span>(mp.<span class="built_in">size</span>())sta[i]=(*mp.<span class="built_in">begin</span>()).first;</span><br><span class="line">		<span class="keyword">else</span> sta[i]=(node)&#123;i,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));f[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> cas=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(f[cas],<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f[cas]));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			f[cas][i+<span class="number">1</span>]=<span class="built_in">min</span>(f[cas][i+<span class="number">1</span>],f[cas^<span class="number">1</span>][i]);</span><br><span class="line">			f[cas^<span class="number">1</span>][sta[i].d+<span class="number">1</span>]=<span class="built_in">min</span>(f[cas^<span class="number">1</span>][sta[i].d+<span class="number">1</span>],f[cas^<span class="number">1</span>][i]+sta[i].w);</span><br><span class="line">		&#125;</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,f[cas^<span class="number">1</span>][n+<span class="number">1</span>]);cas^=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="F-Lunar-New-Year-and-a-Recursive-Sequence"><a href="#F-Lunar-New-Year-and-a-Recursive-Sequence" class="headerlink" title="F. Lunar New Year and a Recursive Sequence"></a><a href="https://codeforces.com/contest/1106/problem/F">F. Lunar New Year and a Recursive Sequence</a></h2><p>$\ \ \ \ \ \ \,$感觉这道题操作比E题麻烦一点，但是确实比E题好想呢。</p>
<p><img src="https://img-blog.csdnimg.cn/20190215213423624.jpg" alt="在这里插入图片描述"></p>
<p>$\ \ \ \ \ \ \,$看到是一个有 $k$ 项的递推式，马上就可以想到矩乘，而前 $k-1$ 项已经确定了是 $1$，我们不妨设要求的 $f_k$ 为 $a$ 。根据他给的式子啊，我们就容易发现，这个递推式的每一项都应该是 $a^x$ 的形式，知道第 $n$ 项是 $a$ 的多少次方就要好处理一些了。</p>
<p>$\ \ \ \ \ \ \,$这样子稍微观察一下矩阵乘法就定义好了：</p>
<p>$\ \ \ \ \ \ \,$转移矩阵：$A=$</p>
<script type="math/tex; mode=display">
\begin{bmatrix}0&0&\cdots&0&b_k\\ 1&0&\cdots&0&b_{k-1}\\0&1&\cdots&0&b_{k-2}\\\vdots&\vdots&\ddots&\vdots&\vdots\\0&0&\cdots&1&b_1\end{bmatrix}</script><p>$\ \ \ \ \ \ \,$初始矩阵：$S=$</p>
<script type="math/tex; mode=display">
\begin{bmatrix}0,0,\cdots,0,1\end{bmatrix}</script><p>$\ \ \ \ \ \ \,$那么第 $n$ 项的指数，就是 $S\cdot A^{n-k}$ 的第 $k$ 项，矩阵乘法取模的时候，根据欧拉定理，因为模数是素数，直接每次模 $mod-1$ 就好了。</p>
<p>$\ \ \ \ \ \ \,$现在问题是，我们知道 $x$，$m$，$mod$，$a^x\%mod=m$，如何求 $a$ 呢？</p>
<p>$\ \ \ \ \ \ \,$好在他给我们的模数很特殊，我们很清楚他的原根为 $3$ ，那么我们可以重新把 $a$ 定义为 $3^s\%mod$，所以原式化为:</p>
<script type="math/tex; mode=display">3^{sx}\%mod=m</script><p>$\ \ \ \ \ \ \,$我们可以很轻松用 BSGS 算法知道 $sx\%(mod-1)$的取值，而我们又知道 $x\%(mod-1)$ 的取值，扩展GCD处理一下就好咯~</p>
<p><img src="https://img-blog.csdnimg.cn/20190215213335919.jpg" alt="在这里插入图片描述"></p>
<p>$\ \ \ \ \ \ \,$然后我们就知道 $s$ 的取值了（也有可能无解），那么答案也就出来了：$f_k=3^s$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> K,m,n;</span><br><span class="line">matrix S,A,T;</span><br><span class="line">matrix <span class="keyword">operator</span> *(matrix m1,matrix m2)&#123;</span><br><span class="line">	matrix t;t.x=m1.x;t.y=m2.y;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m1.x;i++)</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m2.y;j++)&#123;</span><br><span class="line">	  	t.a[i][j]=<span class="number">0</span>;</span><br><span class="line">	  	<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=m1.y;k++)</span><br><span class="line">	  	t.a[i][j]=(<span class="number">1ll</span>*t.a[i][j]+<span class="number">1ll</span>*m1.a[i][k]*m2.a[k][j])%(mod<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">power</span><span class="params">(matrix a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">	matrix ans=a;b--;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1ll</span>)ans=ans*a;</span><br><span class="line">		a=a*a;b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=(<span class="number">1ll</span>*ans*a)%mod;</span><br><span class="line">		a=(<span class="number">1ll</span>*a*a)%mod;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">BSGS</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,<span class="type">long</span> <span class="type">long</span> c)</span></span>&#123;</span><br><span class="line">  	map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;hash;hash.<span class="built_in">clear</span>();b%=c;</span><br><span class="line">  	<span class="type">int</span> t=(<span class="type">int</span>)<span class="built_in">sqrt</span>(c)+<span class="number">1</span>;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;t;j++)&#123;</span><br><span class="line">    	<span class="type">int</span> val=(<span class="type">int</span>)(b*<span class="built_in">power</span>(a,j,c)%c);</span><br><span class="line">    	hash[val]=j;</span><br><span class="line">  	&#125;</span><br><span class="line">  	a=<span class="built_in">power</span>(a,t,c);</span><br><span class="line">  	<span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">  		<span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=t;i++)&#123;</span><br><span class="line">    	<span class="type">int</span> val=<span class="built_in">power</span>(a,i,c);</span><br><span class="line">    	<span class="type">int</span> j=hash.<span class="built_in">find</span>(val)==hash.<span class="built_in">end</span>()?<span class="number">-1</span>:hash[val];</span><br><span class="line">    	<span class="keyword">if</span>(j&gt;=<span class="number">0</span>&amp;&amp;i*t-j&gt;=<span class="number">0</span>)<span class="keyword">return</span> i*t-j;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,<span class="type">long</span> <span class="type">long</span> &amp;d,<span class="type">long</span> <span class="type">long</span> &amp;x,<span class="type">long</span> <span class="type">long</span> &amp;y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!b)&#123;d=a;x=<span class="number">1</span>;y=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="built_in">exgcd</span>(b,a%b,d,y,x);y-=x*(a/b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	K=<span class="built_in">read</span>();S.x=<span class="number">1</span>;</span><br><span class="line">	A.x=A.y=S.y=K;S.a[<span class="number">1</span>][K]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=K;i++)A.a[i][i<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=K;i&gt;=<span class="number">1</span>;i--)A.a[i][K]=<span class="built_in">read</span>();</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">	T=S*<span class="built_in">power</span>(A,n-K);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> t=<span class="built_in">BSGS</span>(<span class="number">3ll</span>,<span class="number">1ll</span>*m,mod);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> g,x,y;</span><br><span class="line">	<span class="built_in">exgcd</span>(T.a[<span class="number">1</span>][K],mod<span class="number">-1</span>,g,x,y);</span><br><span class="line">  	<span class="keyword">if</span>(t%g)<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">  	<span class="keyword">else</span>&#123;</span><br><span class="line">   		x=(t/g*x%(mod<span class="number">-1</span>)+mod<span class="number">-1</span>)%(mod<span class="number">-1</span>);</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">power</span>(<span class="number">3</span>,x,mod));</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h2><p><img src="https://img-blog.csdnimg.cn/20190215213506253.gif" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
        <tag>贪心</tag>
        <tag>修勾勾</tag>
        <tag>暴力模拟</tag>
        <tag>动态规划</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>[SDOI2016]生成魔咒 简易题解</title>
    <url>/2019/03/12/SDOI2016-%E7%94%9F%E6%88%90%E9%AD%94%E5%92%92-%E7%AE%80%E6%98%93%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>题目传送门：<a href="https://www.luogu.com.cn/problem/P4070">[SDOI2016]生成魔咒</a></p>
<span id="more"></span>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>$\ \ \ \ \ \ \,$一看这个题目：</p>
<ul>
<li>只是单调在后面加字符；</li>
<li>只是统计子串数量。</li>
</ul>
<p>$\ \ \ \ \ \ \,$哇！这不是 $SAM$ 的裸题吗，周道感动得要哭了，根据<a href="https://blog.csdn.net/weixin_43973966/article/details/85338266">【后缀自动机的性质】</a>：</p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>$\ \ \ \ \ \ \,$点$i$上面表示子串的数量为:<script type="math/tex">len[fa[i]]−len[i]</script><br>$\ \ \ \ \ \ \,$所以我们每次插入一个点，把新加的子串个数记累加就好了。</p>
<p>$\ \ \ \ \ \ \,$但是一看这个字符集大小……</p>
<p>$\ \ \ \ \ \ \,$不过我们知道，虽然字符集这么大，但是每个节点上面的儿子个数却是远远达不到字符集那么大的，所以我们试着用 $map$ 代替数组来记录儿子：</p>
<p>$\ \ \ \ \ \ \,$然后……就过了……</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Suffix_Automaton</span>&#123;</span><br><span class="line">	map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;ch[N];</span><br><span class="line">  	<span class="type">int</span> last=<span class="number">1</span>,cnt=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> len[N],fa[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> np=++cnt,p=last;last=np;</span><br><span class="line">		len[np]=len[p]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;p&amp;&amp;!ch[p][c];p=fa[p])ch[p][c]=np;</span><br><span class="line">		<span class="keyword">if</span>(!p)fa[np]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="type">int</span> q=ch[p][c];</span><br><span class="line">			<span class="keyword">if</span>(len[q]==len[p]+<span class="number">1</span>)fa[np]=q;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="type">int</span> nq=++cnt;len[nq]=len[p]+<span class="number">1</span>;</span><br><span class="line">				ch[nq]=ch[q];</span><br><span class="line">				fa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class="line">				<span class="keyword">for</span>(;ch[p][c]==q;p=fa[p])ch[p][c]=nq;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=<span class="number">1ll</span>*len[np]-len[fa[np]];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;Sam;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="type">int</span> a=<span class="built_in">read</span>();</span><br><span class="line">		Sam.<span class="built_in">insert</span>(a);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
        <tag>字符串</tag>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P1110\BZOJ1058 [ZJOI2007]报表统计</title>
    <url>/2019/03/12/%E6%B4%9B%E8%B0%B7P1110-BZOJ1058-ZJOI2007-%E6%8A%A5%E8%A1%A8%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<p>题目传送门：<a href="https://www.luogu.com.cn/problem/P1110">洛谷P1110\BZOJ1058 [ZJOI2007]报表统计</a></p>
<span id="more"></span>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>第一次看见这个题：想了一会，woc，三颗平衡树，好麻烦呀，先放一放。</p>
<p>第二次看见这个题：想了一会，woc，平衡树加线段树，好麻烦呀，先放一放。</p>
<p>第三次看见这个题：想了一会，woc，一棵权值平衡树加一棵位置平衡树，好麻烦呀，先放一放。</p>
<p>第四次看见这个题：想了一会，woc，一棵平衡树加堆，好麻烦呀……诶等等，好像可以就开两个差不多的平衡树就行了……</p>
<hr>
<p>写的时候脑袋有点懵，不过还是肝好了呢。</p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>当他插入的时候，显然可以发现，就是在堆里面删除元素：$abs(head[id+1]-tail[id])$；然后插入两个新元素：$abs(head[id+1]-new)$，$abs(new-tail[id])$。然后新的 $tail[id]$ 再附上 $new$。每次询问 $MIN\_GAP$ 就是询问堆里面的最小值了。</p>
<p>支持删除，插入，查询权值最小，显然可以用平衡树去搞。</p>
<p>对于第二种询问，单独插入一个元素，我们需要在集合里面查找他的前驱和后继，便可以计算最小的差值，显然这个询问的答案是单调的，所以我们开全局变量去记录。</p>
<p>支持插入，查前驱，查后继，显然可以又用平衡树去搞。</p>
<p>这里我用了我喜欢的$Fhq\_Treap$，然后前驱后继是直接查的，其实可以通过$pushup$上传最大最小值，但是不知道为什么会慢一点，然后卡了会儿常，代码有点丑：</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> ans=inf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Abs</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span>&#123;<span class="keyword">if</span>(a&lt;<span class="number">0</span>)<span class="keyword">return</span> -a;<span class="keyword">return</span> a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a,<span class="type">const</span> <span class="type">int</span> &amp;b)</span></span>&#123;<span class="keyword">if</span>(a&lt;b)<span class="keyword">return</span> a;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a,<span class="type">const</span> <span class="type">int</span> &amp;b)</span></span>&#123;<span class="keyword">if</span>(a&gt;b)<span class="keyword">return</span> a;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fhq_treap_val</span>&#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> lson ls[rt]</span></span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> rson rs[rt]</span></span><br><span class="line">  <span class="type">int</span> val[N],size[N],key[N];</span><br><span class="line">  <span class="type">int</span> ls[N],rs[N];</span><br><span class="line">  <span class="type">int</span> root,cnt;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;size[rt]=size[lson]+size[rson]+<span class="number">1</span>;&#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a||!b)<span class="keyword">return</span> a|b;</span><br><span class="line">    <span class="keyword">if</span>(key[a]&lt;key[b])&#123;rs[a]=<span class="built_in">merge</span>(rs[a],b);<span class="built_in">pushup</span>(a);<span class="keyword">return</span> a;&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;ls[b]=<span class="built_in">merge</span>(a,ls[b]);<span class="built_in">pushup</span>(b);<span class="keyword">return</span> b;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> x,<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!rt)&#123;a=b=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(val[rt]&lt;=x)&#123;a=rt;<span class="built_in">split</span>(rson,x,rson,b);&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;b=rt;<span class="built_in">split</span>(lson,x,a,lson);&#125;</span><br><span class="line">    <span class="built_in">pushup</span>(rt);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;<span class="keyword">while</span>(rson)rt=rson;<span class="keyword">return</span> val[rt];&#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;<span class="keyword">while</span>(lson)rt=lson;<span class="keyword">return</span> val[rt];&#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt=++cnt;</span><br><span class="line">    val[rt]=x;</span><br><span class="line">    size[rt]=<span class="number">1</span>;key[rt]=<span class="built_in">rand</span>();</span><br><span class="line">    lson=rson=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">split</span>(root,x,a,b);</span><br><span class="line">    <span class="type">int</span> rt=<span class="built_in">newnode</span>(x);</span><br><span class="line">    root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(a,rt),b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Insert_2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">split</span>(root,x,a,b);</span><br><span class="line">    <span class="keyword">if</span>(size[a])ans=<span class="built_in">min</span>(ans,<span class="built_in">abs</span>(x-<span class="built_in">Max</span>(a)));</span><br><span class="line">    <span class="keyword">if</span>(size[b])ans=<span class="built_in">min</span>(ans,<span class="built_in">abs</span>(<span class="built_in">Min</span>(b)-x));</span><br><span class="line">    <span class="type">int</span> rt=<span class="built_in">newnode</span>(x);</span><br><span class="line">    root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(a,rt),b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">split</span>(root,x,a,c);</span><br><span class="line">    <span class="built_in">split</span>(a,x<span class="number">-1</span>,a,b);</span><br><span class="line">    b=<span class="built_in">merge</span>(ls[b],rs[b]);</span><br><span class="line">    root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(a,b),c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;T1,T2;</span><br><span class="line"><span class="type">int</span> n,m,a[N],b[N],id,g;</span><br><span class="line"><span class="type">char</span> op[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">  n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=b[i]=<span class="built_in">read</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)T1.<span class="built_in">Insert</span>(<span class="built_in">Abs</span>(a[i+<span class="number">1</span>]-a[i]));</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)T2.<span class="built_in">Insert_2</span>(a[i]);</span><br><span class="line">  <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line">    <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)&#123;</span><br><span class="line">      id=<span class="built_in">read</span>();g=<span class="built_in">read</span>();</span><br><span class="line">      T2.<span class="built_in">Insert_2</span>(g);</span><br><span class="line">      <span class="keyword">if</span>(id!=n)&#123;</span><br><span class="line">        T1.<span class="built_in">Delete</span>(<span class="built_in">Abs</span>(a[id+<span class="number">1</span>]-b[id]));</span><br><span class="line">        T1.<span class="built_in">Insert</span>(<span class="built_in">Abs</span>(a[id+<span class="number">1</span>]-g));</span><br><span class="line">      &#125;</span><br><span class="line">      T1.<span class="built_in">Insert</span>(<span class="built_in">Abs</span>(b[id]-g));</span><br><span class="line">      b[id]=g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">4</span>]==<span class="string">&#x27;G&#x27;</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,T1.<span class="built_in">Min</span>(T1.root));</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Fhq_Treap</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P4883 mzf的考验 简易题解【fhq treap】</title>
    <url>/2019/03/12/%E6%B4%9B%E8%B0%B7-P4883-mzf%E7%9A%84%E8%80%83%E9%AA%8C-%E7%AE%80%E6%98%93%E9%A2%98%E8%A7%A3-fhq-treap/</url>
    <content><![CDATA[<p>题目传送门：<a href="https://www.luogu.org/problemnew/show/P4883">洛谷 P4883 mzf的考验</a></p>
<span id="more"></span>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><hr>
<p>$\ \ \ \ \ \ \,$首先我们看他的操作：</p>
<ul>
<li>$opt==1$：两个正整数：$l$，$r$。请翻转区间$[l,r]$；</li>
<li>$opt==2$：三个正整数：$l$，$r$，$d$。请将区间$[l,r]$中的所有卦象都异或卦象$d$;</li>
<li>$opt==3$：两个正整数：$l$，$r$。请查询区间$[l,r]$的卦象权值和。</li>
</ul>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>$\ \ \ \ \ \ \,$显然是一个平衡树可以做的啦，我们试着选择$Fhq_treap$ 做一下：</p>
<p>$\ \ \ \ \ \ \,$对于操作 $1$，$3$ 操作很简单，我们 $pushup$ 一下子树和， $pushdown$ 一下旋转标记，提出区间 $[l,r]$ 进行对应的操作就可以了。</p>
<p>$\ \ \ \ \ \ \,$那么对应的 $2$ 操作似乎没有那么简单操作了，我们先看看我们需要修改的 $pushdown$ 操作是什么：</p>
<ol>
<li>单点权值$(val)$：直接异或上修改的值，在$pushdown$操作的时候同理。</li>
<li>权值懒人标记$(lazy_w)$：直接异或上修改的值，在$pushdown$操作的时候同理。</li>
<li>子树和$(sum)$：？</li>
</ol>
<p>$\ \ \ \ \ \ \,$可以发现子树和的处理特别麻烦，但是对于异或问题，我们通常可以拆位解决，对于每一个节点，我们新开一个数组 $num[i]$ ，表示这个子树内的值，数位 $i$ 上面为 $1$ 的值是多少，这个很显然，我们可以通过 $pushup$ 一并传递上去。</p>
<p>$\ \ \ \ \ \ \,$如何处理子树和呢？因为打了标记的子树都要异或这一个值，所以我们把这个值拆了，如果这一位为 $1$ ，那么子树这一位都会 $1$变$0$，$0$变$1$，所以说有：</p>
<script type="math/tex; mode=display">num[i]=size-num[i]</script><p>$\ \ \ \ \ \ \,$其中$size$为子树大小，修改了$num$数组之后，我们就可以重新计算子树和了：</p>
<script type="math/tex; mode=display">sum=\sum_{i=0}^{limit}2^i\times num[i]</script><p>$\ \ \ \ \ \ \,$所以 $pushup$ 和 $pushdown$ 差不多应该是这样的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Xor</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	lazy_w[rt]^=x;val[rt]^=x;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;++i)tmp[i]=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;++i)&#123;</span><br><span class="line">      	<span class="keyword">if</span>(tmp[i])num[rt][i]=size[rt]-num[rt][i];</span><br><span class="line">      	sum[rt]+=(<span class="number">1ll</span>&lt;&lt;i)*num[rt][i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">	size[rt]=size[lson]+size[rson]+<span class="number">1</span>;</span><br><span class="line">	sum[rt]=sum[lson]+sum[rson]+<span class="number">1ll</span>*val[rt];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">	num[rt][i]=num[lson][i]+num[rson][i]+((val[rt]&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">		<span class="built_in">swap</span>(lson,rson);</span><br><span class="line">		<span class="keyword">if</span>(lson)lazy[lson]^=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(rson)lazy[rson]^=<span class="number">1</span>;</span><br><span class="line">		lazy[rt]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(lazy_w[rt])&#123;</span><br><span class="line">		<span class="type">int</span> x=lazy_w[rt];lazy_w[rt]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(lson)&#123;<span class="built_in">Xor</span>(lson,x);&#125;</span><br><span class="line">		<span class="keyword">if</span>(rson)&#123;<span class="built_in">Xor</span>(rson,x);&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$\ \ \ \ \ \ \,$总期望复杂度应该是$O(n\log n\ limit)$，其中$limit=\log val$</p>
<p>$\ \ \ \ \ \ \,$懒得卡常了，吸氧过：</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="comment">//char buf[1&lt;&lt;15],*S=buf,*T=buf;</span></span><br><span class="line"><span class="comment">//char getch()&#123;return S==T&amp;&amp;(T=(S=buf)+fread(buf,1,1&lt;&lt;15,stdin),S==T)?0:*S++;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch;ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">0</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch&amp;<span class="number">15</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">if</span>(f)<span class="keyword">return</span> x;<span class="keyword">else</span> <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fhq_treap</span>&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> lson ls[rt]</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> rson rs[rt]</span></span><br><span class="line">	<span class="type">int</span> ls[N],rs[N];</span><br><span class="line">	<span class="type">bool</span> lazy[N];</span><br><span class="line">	<span class="type">int</span> lazy_w[N],val[N],key[N],size[N];</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> sum[N];</span><br><span class="line">	<span class="type">int</span> root,cnt;</span><br><span class="line">	<span class="type">int</span> tmp[<span class="number">25</span>],num[N][<span class="number">25</span>];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Xor</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">		lazy_w[rt]^=x;val[rt]^=x;</span><br><span class="line">    	sum[rt]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;++i)tmp[i]=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">  		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;++i)&#123;</span><br><span class="line">      		<span class="keyword">if</span>(tmp[i])num[rt][i]=size[rt]-num[rt][i];</span><br><span class="line">      		sum[rt]+=(<span class="number">1ll</span>&lt;&lt;i)*num[rt][i];</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">		size[rt]=size[lson]+size[rson]+<span class="number">1</span>;</span><br><span class="line">		sum[rt]=sum[lson]+sum[rson]+<span class="number">1ll</span>*val[rt];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">		num[rt][i]=num[lson][i]+num[rson][i]+((val[rt]&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">			<span class="built_in">swap</span>(lson,rson);</span><br><span class="line">			<span class="keyword">if</span>(lson)lazy[lson]^=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(rson)lazy[rson]^=<span class="number">1</span>;</span><br><span class="line">			lazy[rt]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(lazy_w[rt])&#123;</span><br><span class="line">			<span class="type">int</span> x=lazy_w[rt];lazy_w[rt]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(lson)&#123;<span class="built_in">Xor</span>(lson,x);&#125;</span><br><span class="line">			<span class="keyword">if</span>(rson)&#123;<span class="built_in">Xor</span>(rson,x);&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!a||!b)<span class="keyword">return</span> a|b;</span><br><span class="line">		<span class="keyword">if</span>(key[a]&lt;key[b])&#123;<span class="built_in">pushdown</span>(a);rs[a]=<span class="built_in">merge</span>(rs[a],b);<span class="built_in">pushup</span>(a);<span class="keyword">return</span> a;&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="built_in">pushdown</span>(b);ls[b]=<span class="built_in">merge</span>(a,ls[b]);<span class="built_in">pushup</span>(b);<span class="keyword">return</span> b;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> x,<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!rt)&#123;a=b=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">		<span class="built_in">pushdown</span>(rt);</span><br><span class="line">		<span class="keyword">if</span>(x&lt;=size[lson])&#123;b=rt;<span class="built_in">split</span>(lson,x,a,lson);&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;a=rt;<span class="built_in">split</span>(rson,x-size[lson]<span class="number">-1</span>,rson,b);&#125;</span><br><span class="line">		<span class="built_in">pushup</span>(rt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> rt=++cnt;</span><br><span class="line">		size[rt]=<span class="number">1</span>;val[rt]=x;key[rt]=<span class="built_in">rand</span>();</span><br><span class="line">		lazy[rt]=<span class="number">0</span>;lazy_w[rt]=<span class="number">0</span>;</span><br><span class="line">		lson=rson=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> rt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">		stack&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">		<span class="type">int</span> rt,last;</span><br><span class="line">	  	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">	    rt=<span class="built_in">newnode</span>(a[i]);last=<span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">while</span>(!S.<span class="built_in">empty</span>()&amp;&amp;key[S.<span class="built_in">top</span>()]&gt;key[rt])</span><br><span class="line">			<span class="built_in">pushup</span>(last=S.<span class="built_in">top</span>()),S.<span class="built_in">pop</span>();</span><br><span class="line">	    	<span class="keyword">if</span>(!S.<span class="built_in">empty</span>())rs[S.<span class="built_in">top</span>()]=rt;</span><br><span class="line">	    	lson=last;S.<span class="built_in">push</span>(rt);</span><br><span class="line">	  	&#125;</span><br><span class="line">	  	<span class="keyword">while</span>(!S.<span class="built_in">empty</span>())<span class="built_in">pushup</span>(last=S.<span class="built_in">top</span>()),S.<span class="built_in">pop</span>();</span><br><span class="line">	  	<span class="keyword">return</span> last; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Revers</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> a,b,c;</span><br><span class="line">		<span class="built_in">split</span>(root,r,a,c);</span><br><span class="line">		<span class="built_in">split</span>(a,l<span class="number">-1</span>,a,b);</span><br><span class="line">		lazy[b]^=<span class="number">1</span>;</span><br><span class="line">		root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(a,b),c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> a,b,c;</span><br><span class="line">		<span class="built_in">split</span>(root,r,a,c);</span><br><span class="line">		<span class="built_in">split</span>(a,l<span class="number">-1</span>,a,b);</span><br><span class="line">		<span class="built_in">Xor</span>(b,d);</span><br><span class="line">		root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(a,b),c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> a,b,c;</span><br><span class="line">		<span class="built_in">split</span>(root,r,a,c);</span><br><span class="line">		<span class="built_in">split</span>(a,l<span class="number">-1</span>,a,b);</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> ret=sum[b];</span><br><span class="line">		root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(a,b),c);</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N],op,l,r,d;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=<span class="built_in">read</span>();</span><br><span class="line">	Tree.root=Tree.<span class="built_in">build</span>(a,n);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		op=<span class="built_in">read</span>();l=<span class="built_in">read</span>();r=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>)Tree.<span class="built_in">Revers</span>(l,r);</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">2</span>)d=<span class="built_in">read</span>(),Tree.<span class="built_in">Update</span>(l,r,d);</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">3</span>)cout&lt;&lt;Tree.<span class="built_in">Query</span>(l,r)&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Fhq_Treap</tag>
      </tags>
  </entry>
</search>
